pekko {
  # use JDBC plugin to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "jdbc-journal"
    auto-start-journals = ["jdbc-journal"]

    snapshot-store.plugin = "jdbc-snapshot-store"
    auto-start-snapshot-stores = ["jdbc-snapshot-store"]
  }

  projection {
    jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size = 10
    jdbc.dialect = postgres-dialect
  }
}

jdbc-journal {
  use-shared-db = "slick"
}

# Snapshot store
jdbc-snapshot-store {
  use-shared-db = "slick"
}

# Pekko Persistence Query provider
jdbc-read-journal {
  use-shared-db = "slick"
}

jdbc-durable-state-store {
  use-shared-db = "slick"
}


pekko-persistence-jdbc {
  shared-databases {
    slick {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        name = ${jdbc-connection-settings.database}
        host = ${jdbc-connection-settings.host}
        url = ${jdbc-connection-settings.url}
        user = ${jdbc-connection-settings.user}
        password = ${jdbc-connection-settings.password}
        driver = "org.postgresql.Driver"
        numThreads = 5
        maxConnections = 5
        minConnections = 1
      }
    }
  }
}

jdbc-connection-settings {

  host = "localhost"
  host = ${?POSTGRESQL_HOST}

  port = 5432
  port = ${?POSTGRESQL_PORT}

  user = "nft_asset"
  user = ${?POSTGRESQL_USER}

  password = "nft_asset"
  password = ${?POSTGRESQL_PASSWORD}

  schema = "nft_asset"
  schema = ${?POSTGRESQL_SCHEMA}

  database = "nft_asset"
  database = ${?POSTGRESQL_DB}

  driver = "org.postgresql.Driver"
  driver = ${?POSTGRESQL_DRIVER}

  url = "jdbc:postgresql://"${jdbc-connection-settings.host}":"${jdbc-connection-settings.port}"/"${jdbc-connection-settings.database}"?user="${jdbc-connection-settings.user}"&password="${jdbc-connection-settings.password}"&currentSchema="${jdbc-connection-settings.schema}
  url = ${?POSTGRESQL_URL}

  # the following properties are used to configure the
  # Hikari connection pool used on the read-side (akka-projections)
  connection-pool {
    # How many connections should be available to from the pool?
    # it's recommended to use the same value used by the blocking-jdbc-dispatcher (see above)
    max-pool-size = ${pekko.projection.jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size}

    # How long should we wait (in millis) before it times out?
    # In a normal scenario, we should always be able to get a connection
    # If we got a thread from the blocking-jdbc-dispatcher, we should be able to get a connection.
    # If for some reason the pool can't provide a connection, it's better to let it crash and liberate the current thread.
    # Hence the low timout (note, 250 is lowest value hikari accepts)
    timeout = 250ms
  }

}

scalikejdbc.global {
  loggingSQLErrors = true
  loggingConnections = false
}
